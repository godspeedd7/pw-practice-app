name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      environment:
        description: 'Environment to test against'
        required: false
        default: 'local'
        type: choice
        options:
          - local
          - staging

env:
  NODE_VERSION: 18
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

jobs:
  test:
    name: "Tests (${{ matrix.browser }})"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox
            project: firefox

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: npm ci --force

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Install system dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps ${{ matrix.browser }}

      - name: Validate environment variables
        run: |
          if [ -z "${{ secrets.TEST_USER_EMAIL }}" ]; then
            echo "::warning::TEST_USER_EMAIL secret is not set"
          fi
          if [ -z "${{ secrets.TEST_USER_PASSWORD }}" ]; then
            echo "::warning::TEST_USER_PASSWORD secret is not set"
          fi

      - name: Start web server
        run: |
          npm run start:ci &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          npx wait-on http://localhost:4200 --timeout 120000 --interval 1000
          echo "::notice::Server started successfully on http://localhost:4200"

      - name: Run Playwright tests
        run: |
          if [ "${{ github.event.inputs.browser }}" = "all" ] || [ -z "${{ github.event.inputs.browser }}" ]; then
            npx playwright test --project=${{ matrix.project }} --config playwright.ci.config.ts --reporter=blob
          elif [ "${{ github.event.inputs.browser }}" = "${{ matrix.browser }}" ]; then
            npx playwright test --project=${{ matrix.project }} --config playwright.ci.config.ts --reporter=blob
          else
            echo "Skipping ${{ matrix.browser }} as it doesn't match selected browser"
            exit 0
          fi
        env:
          BASE_URL: ${{ secrets.BASE_URL || 'http://localhost:4200' }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          TEST_DELETE_EMAIL: ${{ secrets.TEST_DELETE_EMAIL }}
          TEST_EDIT_EMAIL: ${{ secrets.TEST_EDIT_EMAIL }}
          TEST_AGE_FILTERS: ${{ secrets.TEST_AGE_FILTERS }}
          CI: true
          NODE_ENV: test

      - name: Stop web server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

      - name: Upload blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.browser }}
          path: blob-report/
          retention-days: 1

      - name: Upload test videos
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  merge-reports:
    name: "Merge Reports"
    if: always()
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --force

      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          pattern: blob-report-*
          path: all-blob-reports
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = \`## ðŸŽ­ Playwright Test Results
            
            Test run completed for commit \${{ github.sha }}
            
            ðŸ“Š [View HTML Report](https://github.com/\${{ github.repository }}/actions/runs/\${{ github.run_id }})
            
            **Browsers tested:** Chromium, Firefox
            **Run attempt:** \${{ github.run_attempt }}
            \`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
