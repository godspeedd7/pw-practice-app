name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox

env:
  NODE_VERSION: 18

jobs:
  # 🔢 Generate Dynamic Matrix Based on Total Tests
  generate-shards-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      total-tests: ${{ steps.test-count.outputs.total }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --force

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Get Total Number of Tests
        id: test-count
        run: |
          # Get test count for each browser if browser selection is specified
          if [ "${{ github.event.inputs.browser }}" = "chromium" ]; then
            TEST_LIST_OUTPUT=$(npx playwright test --list --project=chromium)
          elif [ "${{ github.event.inputs.browser }}" = "firefox" ]; then
            TEST_LIST_OUTPUT=$(npx playwright test --list --project=firefox)
          else
            TEST_LIST_OUTPUT=$(npx playwright test --list)
          fi
          
          TOTAL_TESTS=$(echo "$TEST_LIST_OUTPUT" | grep -E "Total:|tests found" | tail -1 | grep -o '[0-9]\+' | head -1)
          echo "total=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "Total tests found: $TOTAL_TESTS"

      - name: Calculate optimal shards
        id: set-matrix
        run: |
          TOTAL_TESTS="${{ steps.test-count.outputs.total }}"
          
          # Calculate shards (aim for ~10-15 tests per shard for optimal parallelization)
          SHARD_COUNT=$(( (TOTAL_TESTS + 12) / 13 ))
          
          # Ensure minimum 1 shard, maximum 20 shards
          if [ "$SHARD_COUNT" -lt 1 ]; then
            SHARD_COUNT=1
          elif [ "$SHARD_COUNT" -gt 20 ]; then
            SHARD_COUNT=20
          fi
          
          echo "Calculated shard count: $SHARD_COUNT for $TOTAL_TESTS tests"
          
          # Generate matrix for browsers
          BROWSERS='["chromium", "firefox"]'
          if [ "${{ github.event.inputs.browser }}" != "all" ] && [ "${{ github.event.inputs.browser }}" != "" ]; then
            BROWSERS='["${{ github.event.inputs.browser }}"]'
          fi
          
          # Create matrix JSON
          MATRIX=$(jq -cn \
            --argjson browsers "$BROWSERS" \
            --argjson shards "$SHARD_COUNT" \
            '{
              include: [
                $browsers[] as $browser |
                range(1; $shards + 1) as $shard |
                {
                  browser: $browser,
                  "shard-index": $shard,
                  "total-shards": $shards,
                  project: (if $browser == "chromium" then "chromium" else "firefox" end)
                }
              ]
            }')
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # 🧱 Build/Setup Step
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --force

      - name: Validate environment variables
        run: |
          missing_secrets=false
          if [ -z "${{ secrets.TEST_USER_EMAIL }}" ]; then
            echo "::error::TEST_USER_EMAIL secret is not set"
            missing_secrets=true
          fi
          if [ -z "${{ secrets.TEST_USER_PASSWORD }}" ]; then
            echo "::error::TEST_USER_PASSWORD secret is not set"
            missing_secrets=true
          fi
          if [ "$missing_secrets" = true ]; then
            echo "::error::Required secrets are missing. Tests may fail."
            exit 1
          fi
          echo "::notice::All required secrets are configured"

      - name: Upload setup artifact
        uses: actions/upload-artifact@v4
        with:
          name: setup-complete
          path: package.json
          retention-days: 1

  # 🚀 Run Sharded Tests
  test:
    name: "Tests (${{ matrix.browser }}-${{ matrix.shard-index }}/${{ matrix.total-shards }})"
    needs: [generate-shards-matrix, setup]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-shards-matrix.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --force

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}-${{ matrix.browser }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ matrix.browser }}-
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Start web server
        run: |
          npm run start:ci &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          if npx wait-on http://localhost:4200 --timeout 120000 --interval 1000; then
            echo "::notice::Server started successfully on http://localhost:4200"
          else
            echo "::error::Server failed to start within timeout"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi

      - name: Run Playwright tests (Shard ${{ matrix.shard-index }}/${{ matrix.total-shards }})
        run: |
          echo "::group::Running Playwright tests for ${{ matrix.browser }} (shard ${{ matrix.shard-index }}/${{ matrix.total-shards }})"
          npx playwright test --project=${{ matrix.project }} --config playwright.ci.config.ts --reporter=blob --shard=${{ matrix.shard-index }}/${{ matrix.total-shards }}
          echo "::endgroup::"
        env:
          BASE_URL: ${{ secrets.BASE_URL || 'http://localhost:4200' }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          TEST_DELETE_EMAIL: ${{ secrets.TEST_DELETE_EMAIL }}
          TEST_EDIT_EMAIL: ${{ secrets.TEST_EDIT_EMAIL }}
          TEST_AGE_FILTERS: ${{ secrets.TEST_AGE_FILTERS }}
          CI: true
          NODE_ENV: test

      - name: Stop web server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            echo "::notice::Stopping server (PID: $SERVER_PID)"
            kill $SERVER_PID || true
            sleep 2
          fi

      - name: Upload blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.browser }}-${{ matrix.shard-index }}
          path: blob-report/
          retention-days: 1

      - name: Upload traces on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: traces-${{ matrix.browser }}-shard-${{ matrix.shard-index }}
          path: test-results/**/trace.zip
          retention-days: 7

      - name: Upload test videos on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-videos-${{ matrix.browser }}-shard-${{ matrix.shard-index }}
          path: test-results/**/video.*
          retention-days: 7

  # 🧪 Merge Reports
  merge-reports:
    name: "Merge Reports"
    if: always() && needs.test.result != 'cancelled' && needs.test.result != 'skipped'
    needs: [test, generate-shards-matrix]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --force

      - name: Download all shard reports
        uses: actions/download-artifact@v4
        with:
          path: blob-reports
          pattern: test-report-*
          merge-multiple: true

      - name: Merge to HTML Report
        run: |
          echo "::group::Merging reports"
          mkdir -p playwright-report
          
          if ! npx playwright merge-reports --reporter html ./blob-reports; then
            echo "::warning::Report merging failed, creating fallback report"
            echo "<html><head><title>Test Report</title></head><body><h1>Test Report Generation Failed</h1><p>The test report could not be generated due to merge issues. Please check individual test reports.</p><p>Total tests: ${{ needs.generate-shards-matrix.outputs.total-tests }}</p></body></html>" > playwright-report/index.html
          fi
          echo "::endgroup::"

      - name: Upload merged HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report--attempt-${{ github.run_attempt }}
          path: playwright-report/
          retention-days: 14

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const reportExists = fs.existsSync('playwright-report/index.html');
            const totalTests = '${{ needs.generate-shards-matrix.outputs.total-tests }}';
            
            const comment = `## 🎭 Playwright Test Results
            
            **Test run completed for commit:** \`${{ github.sha }}\`
            **Browser selection:** ${{ github.event.inputs.browser || 'all' }}
            **Total tests:** ${totalTests}
            **Run attempt:** ${{ github.run_attempt }}
            
            ${reportExists ? '✅' : '❌'} **Merged Report:** ${reportExists ? 'Available' : 'Failed to generate'}
            
            ### 📊 Available Reports:
            - 📋 [Merged HTML Report](${runUrl}) (Download: \`playwright-report--attempt-${{ github.run_attempt }}\`)
            - 🔍 [Test Traces](${runUrl}) (Download: \`traces-*-shard-*\` - only for failed tests)
            - 🎬 [Test Videos](${runUrl}) (Download: \`test-videos-*-shard-*\` - only for failed tests)
            
            **Dynamic sharding:** Optimized based on test count
            
            ---
            *View detailed results and download artifacts from the [Actions run](${runUrl})*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail merge job if any test job failed
        run: |
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "Some test jobs failed, failing this merge job for visibility."
            exit 1
          fi

  # 🧹 Cleanup Artifacts
  cleanup:
    if: success() && needs.test.result == 'success'
    needs: [merge-reports, test]
    runs-on: ubuntu-latest
    steps:
      - name: Delete intermediate artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            test-report-*
            setup-complete
